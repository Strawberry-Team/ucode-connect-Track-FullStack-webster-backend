// prisma/schema.prisma
datasource db {
  provider          = "mysql"
  url               = env("DB_APP_URL")
  shadowDatabaseUrl = env("SHADOW_DB_APP_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
//   output   = "../docs/db/generated"
// }

model User {
  id                 Int      @id @default(autoincrement())
  password           String   @db.VarChar(255)
  firstName          String   @map("first_name") @db.VarChar(100)
  lastName           String?  @map("last_name") @db.VarChar(100)
  email              String   @unique(map: "users_email_uq") @db.VarChar(255)
  role               UserRole @default(USER)
  profilePictureName String   @default("default-avatar.png") @map("profile_picture_name") @db.VarChar(255)

  isEmailVerified Boolean  @default(false) @map("is_email_verified")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

  refreshTokenNonces RefreshTokenNonce[] @relation(map: "refresh_token_nonces_user_id_fk")

  @@map("users")
}

model RefreshTokenNonce {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  nonce     String   @db.Char(32)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, map: "refresh_token_nonces_user_id_fk")

  @@index([userId], map: "idx_refresh_token_nonces_user_id")
  @@index([userId, nonce], map: "idx_refresh_token_nonces_user_id_nonce")
  @@map("refresh_token_nonces")
}

enum UserRole {
  USER  @map("user")
  ADMIN @map("admin")
}